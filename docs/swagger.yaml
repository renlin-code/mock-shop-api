basePath: /
definitions:
  domain.ConfirmEmailInput:
    properties:
      password:
        type: string
      token:
        type: string
    type: object
  domain.CreateOrderInput:
    properties:
      products:
        items:
          $ref: '#/definitions/domain.CreateOrderInputProduct'
        type: array
    type: object
  domain.CreateOrderInputProduct:
    properties:
      id:
        type: integer
      quantity:
        type: integer
    type: object
  domain.DeleteProfileInput:
    properties:
      password:
        type: string
    type: object
  domain.RecoveryPasswordInput:
    properties:
      email:
        type: string
    type: object
  domain.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  domain.SignUpInput:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  domain.UpdatePasswordInput:
    properties:
      password:
        type: string
      token:
        type: string
    type: object
  handler.response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8020
info:
  contact: {}
  description: API Service for a Mock Online Shop
  title: Mock Shop API
  version: "1.0"
paths:
  /admin/categories:
    post:
      consumes:
      - multipart/form-data
      description: Create a new category.
      operationId: create-category
      parameters:
      - description: Category name
        in: formData
        name: name
        required: true
        type: string
      - description: Category description
        in: formData
        name: description
        required: true
        type: string
      - description: Category is available
        in: formData
        name: available
        required: true
        type: boolean
      - description: Category image
        in: formData
        name: image_file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Create Category
      tags:
      - Admin
  /admin/categories/{id}:
    put:
      consumes:
      - multipart/form-data
      description: Update category.
      operationId: update-category
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      - description: Category name
        in: formData
        name: name
        type: string
      - description: Category description
        in: formData
        name: description
        type: string
      - description: Category is available
        in: formData
        name: available
        type: boolean
      - description: Category image
        in: formData
        name: image_file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Update Category
      tags:
      - Admin
  /admin/products:
    post:
      consumes:
      - multipart/form-data
      description: Create a new product.
      operationId: create-product
      parameters:
      - description: Category id
        in: formData
        name: category_id
        required: true
        type: integer
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product actual price
        in: formData
        name: price
        required: true
        type: number
      - description: Product price without any discount
        in: formData
        name: undiscounted_price
        required: true
        type: number
      - description: Product stock
        in: formData
        name: stock
        required: true
        type: integer
      - description: Product is available
        in: formData
        name: available
        required: true
        type: boolean
      - description: Product image
        in: formData
        name: image_file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Create Product
      tags:
      - Admin
  /admin/products/{id}:
    put:
      consumes:
      - multipart/form-data
      description: Update product.
      operationId: update-product
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: integer
      - description: Category id
        in: formData
        name: category_id
        type: integer
      - description: Product name
        in: formData
        name: name
        type: string
      - description: Product description
        in: formData
        name: description
        type: string
      - description: Product actual price
        in: formData
        name: price
        type: number
      - description: Product price without any discount
        in: formData
        name: undiscounted_price
        type: number
      - description: Product stock
        in: formData
        name: stock
        type: integer
      - description: Product is available
        in: formData
        name: available
        type: boolean
      - description: Product image
        in: formData
        name: image_file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Update Product
      tags:
      - Admin
  /api/categories:
    get:
      consumes:
      - application/json
      description: Get all product categories.
      operationId: get-categories
      parameters:
      - description: 'Pagination: page number'
        in: query
        name: page
        type: string
      - description: 'Pagination: amount of items per page'
        in: query
        name: pageSize
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: Get Categories
      tags:
      - Product Ð¡ategories
  /api/categories/{id}:
    get:
      consumes:
      - application/json
      description: Get category by id.
      operationId: get-category-by-id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: Get Category By Id
      tags:
      - Product Ð¡ategories
  /api/categories/{id}/products:
    get:
      consumes:
      - application/json
      description: Get all products in a category.
      operationId: get-category-products
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Pagination: page number'
        in: query
        name: page
        type: string
      - description: 'Pagination: amount of items per page'
        in: query
        name: pageSize
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: Get Category Products
      tags:
      - Products
  /api/products:
    get:
      consumes:
      - application/json
      description: Get all products.
      operationId: get-products
      parameters:
      - description: 'Pagination: page number'
        in: query
        name: page
        type: string
      - description: 'Pagination: amount of items per page'
        in: query
        name: pageSize
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: Get Products
      tags:
      - Products
  /api/products/{id}:
    get:
      consumes:
      - application/json
      description: Get product by id.
      operationId: get-product-by-id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: Get Product By Id
      tags:
      - Products
  /auth/confirm-email:
    post:
      consumes:
      - application/json
      description: Confirm the specified email when creating a user account and add
        a password for the account. If the request is successful, the user account
        is created and the user can log into it.
      operationId: confirm-email
      parameters:
      - description: Account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.ConfirmEmailInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: User Confirm Email
      tags:
      - User Authorization
  /auth/password-recovery:
    post:
      consumes:
      - application/json
      description: 'Recovery password. If the request is successful, the service sends
        an e-mail to the account email address with an email confirmation token as
        a URL param "confToken". For example: https://client.com/password-recovery?confToken=eyJhbGciOiJIU1iIR5csdDIkwErXVCJ9.
        This token is required to set a new password.'
      operationId: recovery-password
      parameters:
      - description: Account email
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.RecoveryPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: User Recovery Password
      tags:
      - User Authorization
  /auth/password-update:
    put:
      consumes:
      - application/json
      description: Set new password. If the request is successful, the account password
        is changed for the specified new password.
      operationId: update-password
      parameters:
      - description: Account new password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.UpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: User Update Password
      tags:
      - User Authorization
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Log into an existing user account. If the request is successful,
        the service returns an authorization token.
      operationId: login
      parameters:
      - description: Account access
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: User Sign In
      tags:
      - User Authorization
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: 'Create a user account. With this account the user can place orders.
        If the request is successful, the service sends an e-mail to the specified
        email address with an email confirmation token as a URL param "confToken".
        For example: https://store.com/confirm-email?confToken=eyJhbGciOiJIU1iIR5csdDIkwErXVCJ9.
        This token is required to confirm specified user email.'
      operationId: create-account
      parameters:
      - description: Account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.SignUpInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      summary: User Sign Up
      tags:
      - User Authorization
  /profile/:
    delete:
      consumes:
      - application/json
      description: Delete user profile.
      operationId: delete-user-account
      parameters:
      - description: Account password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.DeleteProfileInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Delete User Profile
      tags:
      - User Profile
    get:
      consumes:
      - application/json
      description: Get user account.
      operationId: get-user-account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Get User Account
      tags:
      - User Profile
    put:
      consumes:
      - multipart/form-data
      description: Update user account info.
      operationId: update-user-account
      parameters:
      - description: User name
        in: formData
        name: name
        type: string
      - description: User profile image
        in: formData
        name: profile_image_file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Update User Account
      tags:
      - User Profile
  /profile/orders:
    get:
      consumes:
      - application/json
      description: Get all user's orders.
      operationId: get-orders
      parameters:
      - description: 'Pagination: page number'
        in: query
        name: page
        type: string
      - description: 'Pagination: amount of items per page'
        in: query
        name: pageSize
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Get Orders
      tags:
      - User Profile
    post:
      consumes:
      - application/json
      description: Create a new order. If the request is successful, a new order is
        added to the user's list of orders and the stock of products in the catalog
        is updated.
      operationId: create-order
      parameters:
      - description: Order info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.CreateOrderInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Create Order
      tags:
      - User Profile
  /profile/orders/{id}:
    get:
      consumes:
      - application/json
      description: Get user's order by id.
      operationId: get-order-by-id
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.response'
      security:
      - ApiKeyAuth: []
      summary: Get Order By Id
      tags:
      - User Profile
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
